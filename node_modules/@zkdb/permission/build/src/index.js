const OWNERSHIP_TYPE = ['owner', 'group'];
const PERMISSION_TYPE = ['owner', 'group', 'other'];
const PERMISSION_FIELD = ['write', 'read', 'delete', 'system'];
const PERMISSION_ORDER_READ = 0;
const PERMISSION_ORDER_WRITE = 1;
const PERMISSION_ORDER_DELETE = 2;
const PERMISSION_ORDER_SYSTEM = 3;

/* eslint-disable no-unused-expressions */
/* eslint-disable no-bitwise */
class PermissionBase {
    #permission;
    constructor(permission) {
        this.#permission = permission;
    }
    bitTurnOn(bit) {
        this.#permission |= 1 << bit;
    }
    bitTurnOff(bit) {
        this.#permission &= ~(1 << bit);
    }
    getBit(bit) {
        return (this.#permission & (1 << bit)) !== 0;
    }
    set write(value) {
        value
            ? this.bitTurnOn(PERMISSION_ORDER_WRITE)
            : this.bitTurnOff(PERMISSION_ORDER_WRITE);
    }
    get write() {
        return this.getBit(PERMISSION_ORDER_WRITE);
    }
    set read(value) {
        value
            ? this.bitTurnOn(PERMISSION_ORDER_READ)
            : this.bitTurnOff(PERMISSION_ORDER_READ);
    }
    get read() {
        return this.getBit(PERMISSION_ORDER_READ);
    }
    set delete(value) {
        value
            ? this.bitTurnOn(PERMISSION_ORDER_DELETE)
            : this.bitTurnOff(PERMISSION_ORDER_DELETE);
    }
    get delete() {
        return this.getBit(PERMISSION_ORDER_DELETE);
    }
    set system(value) {
        value
            ? this.bitTurnOn(PERMISSION_ORDER_SYSTEM)
            : this.bitTurnOff(PERMISSION_ORDER_SYSTEM);
    }
    get system() {
        return this.getBit(PERMISSION_ORDER_SYSTEM);
    }
    get value() {
        return this.#permission & 0xff;
    }
    toJSON() {
        return {
            write: this.write,
            read: this.read,
            delete: this.delete,
            system: this.system,
        };
    }
    combine(other) {
        return new PermissionBase(other.value | this.value);
    }
    eq(other) {
        return this.value === other.value;
    }
    contain(other) {
        return (this.value & other.value) === other.value;
    }
    static from(...args) {
        const param = args[0];
        if (typeof param === 'number') {
            return new PermissionBase(param);
        }
        const permission = new PermissionBase(0);
        for (let i = 0; i < PERMISSION_FIELD.length; i += 1) {
            const key = PERMISSION_FIELD[i];
            if (typeof param[key] === 'boolean') {
                permission[key] = param[key];
            }
        }
        return permission;
    }
    static permissionNone() {
        return new PermissionBase(0);
    }
    static permissionRead() {
        return PermissionBase.from({ read: true });
    }
    static permissionWrite() {
        return PermissionBase.from({ write: true });
    }
    static permissionDelete() {
        return PermissionBase.from({ delete: true });
    }
    static permissionReadWrite() {
        return PermissionBase.from({
            read: true,
            write: true,
        });
    }
    static permissionReadWriteDelete() {
        return PermissionBase.from({
            read: true,
            write: true,
            delete: true,
        });
    }
    static permissionAll() {
        return PermissionBase.from({
            read: true,
            write: true,
            delete: true,
            system: true,
        });
    }
}

class Permission {
    #owner = PermissionBase.from(0);
    #group = PermissionBase.from(0);
    #other = PermissionBase.from(0);
    constructor(...args) {
        if (args.length === 1) {
            const permission = args[0];
            this.#owner = PermissionBase.from(permission >> 16);
            this.#group = PermissionBase.from((permission >> 8) & 0xff);
            this.#other = PermissionBase.from(permission & 0xff);
        }
        else if (args.length === 3) {
            const [owner, group, other] = args;
            this.#owner = PermissionBase.from(owner);
            this.#group = PermissionBase.from(group);
            this.#other = PermissionBase.from(other);
        }
        else {
            throw new Error('Invalid arguments');
        }
    }
    get owner() {
        return this.#owner;
    }
    get group() {
        return this.#group;
    }
    get other() {
        return this.#other;
    }
    get value() {
        return (((this.#owner.value << 16) |
            (this.#group.value << 8) |
            this.#other.value) &
            0xffffff);
    }
    toJSON() {
        return {
            owner: this.#owner.toJSON(),
            group: this.#group.toJSON(),
            other: this.#other.toJSON(),
        };
    }
    combine(permission) {
        return new Permission(permission.value | this.value);
    }
    static from(...args) {
        const param = args[0];
        if (typeof param === 'number') {
            return new Permission(param);
        }
        const jsonParam = param;
        const permission = new Permission(jsonParam.owner ? PermissionBase.from(jsonParam.owner).value : 0, jsonParam.group ? PermissionBase.from(jsonParam.group).value : 0, jsonParam.other ? PermissionBase.from(jsonParam.other).value : 0);
        return permission;
    }
    static policyStrict() {
        return Permission.from({
            owner: {
                read: true,
                write: true,
                delete: true,
                system: true,
            },
        });
    }
    static policyPrivate() {
        return Permission.from({
            owner: {
                read: true,
                write: true,
                delete: true,
                system: true,
            },
            group: {
                read: true,
                write: false,
                delete: false,
                system: false,
            },
        });
    }
    static policyPublic() {
        return Permission.from({
            owner: {
                read: true,
                write: true,
                delete: true,
                system: true,
            },
            group: {
                read: true,
                write: true,
                delete: false,
                system: false,
            },
            other: {
                read: true,
                write: false,
                delete: false,
                system: false,
            },
        });
    }
}

export { OWNERSHIP_TYPE, PERMISSION_FIELD, PERMISSION_ORDER_DELETE, PERMISSION_ORDER_READ, PERMISSION_ORDER_SYSTEM, PERMISSION_ORDER_WRITE, PERMISSION_TYPE, Permission, PermissionBase };
//# sourceMappingURL=index.js.map
