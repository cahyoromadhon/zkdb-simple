import { ApolloClient } from "@apollo/client";
import { API_COLLECTION } from "./collection";
import { API_COLLECTION_INDEX } from "./collection-index";
import { API_DATABASE } from "./database";
import { API_DOCUMENT } from "./document";
import { API_GROUP } from "./group";
import { API_MERKLE } from "./merkle";
import { API_PERMISSION_OWNERSHIP } from "./permission-ownership";
import { API_PROOF } from "./proof";
import { API_ROLLUP } from "./rollup";
import { API_TRANSACTION } from "./transaction";
import { API_USER } from "./user";
import { API_PROVER } from "./prover";
export interface IApiClient {
    api: ApiClient;
    db: ReturnType<typeof API_DATABASE>;
    collection: ReturnType<typeof API_COLLECTION>;
    index: ReturnType<typeof API_COLLECTION_INDEX>;
    document: ReturnType<typeof API_DOCUMENT>;
    user: ReturnType<typeof API_USER>;
    group: ReturnType<typeof API_GROUP>;
    merkle: ReturnType<typeof API_MERKLE>;
    proof: ReturnType<typeof API_PROOF>;
    transaction: ReturnType<typeof API_TRANSACTION>;
    rollup: ReturnType<typeof API_ROLLUP>;
    permissionOwnership: ReturnType<typeof API_PERMISSION_OWNERSHIP>;
    prover: ReturnType<typeof API_PROVER>;
}
export declare class ApiClient {
    #private;
    private readonly storage;
    get apollo(): ApolloClient<any>;
    constructor(uri: string, storage: Storage);
    static newInstance(url: string, storage: Storage): IApiClient;
}
