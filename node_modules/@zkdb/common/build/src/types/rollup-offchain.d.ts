import { ObjectId } from 'mongodb';
import { JsonProof } from 'o1js';
import { TDbRecord } from './common';
import { TDatabaseRequest, TMetadataDatabase } from './database';
import { TPagination, TPaginationReturn } from './pagination';
import { EQueueTaskStatus, TGenericQueueBase } from './queue';
export type TRollupSerializedProof = {
    step: bigint;
    proof: JsonProof;
    merkleRootOld: string;
};
export type TRollupBaseHistory = {
    databaseName: string;
    step: bigint;
    merkleRootOld: string;
    merkleRootNew: string;
};
/**
 * Represents the structure of the data used in the off-chain Rollup Queue system.
 * This type encapsulates the metadata and identifiers needed to process
 * a rollup operation in the system.
 * Used in GenericQueue as a `data` payload
 */
export type TRollupQueueData = {
    databaseName: string;
    operationNumber: bigint;
    collectionName: string;
    transitionLogObjectId: ObjectId;
    docId: string;
};
export type TRollupOffChainHistory = TRollupBaseHistory & Pick<TRollupQueueData, 'docId' | 'collectionName'> & Pick<TGenericQueueBase<TRollupQueueData>, 'status' | 'acquiredAt'>;
export type TRollupOffChainRecord = TDbRecord<Pick<TRollupSerializedProof, 'step' | 'proof'> & Pick<TMetadataDatabase, 'databaseName'> & {
    transitionLogObjectId: ObjectId;
}>;
export type TRollupOffChainState = Pick<TRollupBaseHistory, 'databaseName'> & {
    merkleRootOld: string | null;
    merkleRootNew: string | null;
    rollupOffChainState: EQueueTaskStatus;
    latestRollupOffChainSuccess: Date | null;
};
export type TRollupOffChainStateRequest = TDatabaseRequest;
export type TRollupOffChainStateResponse = TRollupOffChainState | null;
export type TRollupOffChainHistoryRequest = {
    databaseName: string;
    pagination?: TPagination;
};
export type TRollupOffChainHistoryResponse = TPaginationReturn<TRollupOffChainHistory[]>;
export type TRollupOffChainHistoryParam = TRollupOffChainHistoryRequest;
