import { ObjectId } from 'mongodb';
import { TNullable } from './common';
export declare enum EDocumentOperation {
    Create = "Create",
    Update = "Update",
    Drop = "Drop"
}
export type TDocumentQueuedData = {
    collectionName: string;
    operationKind: EDocumentOperation;
    newDocumentHash?: string;
    merkleIndex: bigint;
    docId: string;
    documentObjectIdPrevious: ObjectId | null;
    documentObjectIdCurrent: ObjectId | null;
};
export declare enum EQueueTaskStatus {
    Queued = "Queued",
    Processing = "Processing",
    Failed = "Failed",
    Success = "Success",
    Unknown = "Unknown"
}
export type TGenericQueueBase<T> = {
    databaseName: string;
    sequenceNumber: bigint;
    status: EQueueTaskStatus;
    data: T;
    error: any;
    acquiredAt: Date;
};
export type TGenericQueue<T> = TNullable<TGenericQueueBase<T>, 'sequenceNumber' | 'error' | 'acquiredAt'>;
