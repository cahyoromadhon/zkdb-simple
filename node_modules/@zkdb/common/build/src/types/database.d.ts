import { TDbRecord, TPickOptional } from './common.js';
import { TEnvironment } from './environment.js';
import { TPagination, TPaginationReturn } from './pagination.js';
import { ETransactionStatus } from './transaction.js';
export declare enum ENetworkId {
    Testnet = "Testnet",
    Mainnet = "Mainnet"
}
export type TMetadataDatabase = {
    databaseName: string;
    databaseOwner: string;
    merkleHeight: number;
    appPublicKey: string;
    deployStatus: ETransactionStatus;
};
export type TMetadataDatabaseMongo = {
    sizeOnDisk: number;
};
export type TMetadataDatabaseDetail = TMetadataDatabase & TPickOptional<TMetadataDatabaseMongo, 'sizeOnDisk'>;
export type TMetadataDatabaseRecord = TDbRecord<TMetadataDatabase>;
export type TDatabaseParamCreate = Pick<TMetadataDatabase, 'databaseName' | 'merkleHeight' | 'databaseOwner'>;
export type TDatabaseParamIsOwner = Pick<TMetadataDatabase, 'databaseName' | 'databaseOwner'>;
export type TDatabaseParamListDetail = {
    filter: Partial<TMetadataDatabase>;
    pagination?: TPagination;
};
export type TDatabaseParamTransferOwner = Pick<TMetadataDatabase, 'databaseName' | 'databaseOwner'> & {
    newOwner: string;
};
export type TDatabaseParamDeploy = Pick<TMetadataDatabase, 'databaseName'> & {
    actor: string;
};
export type TDatabaseRequest = Pick<TMetadataDatabase, 'databaseName'>;
export type TDatabaseResponse = TMetadataDatabase;
export type TDatabaseDeployRequest = TDatabaseRequest;
export type TDatabaseDeployResponse = boolean;
export type TDatabaseListRequest = {
    query: Partial<TMetadataDatabaseRecord>;
    pagination: TPagination;
};
export type TDatabaseListResponse = TPaginationReturn<TMetadataDatabaseDetail[]>;
export type TDatabaseSharedRequest = TPagination;
export type TDatabaseSharedResponse = TPaginationReturn<TMetadataDatabaseDetail[]>;
export type TDatabaseCreateRequest = TDatabaseRequest & {
    merkleHeight: number;
};
export type TDatabaseCreateResponse = boolean;
export type TDatabaseFindByIndexRequest = TDatabaseRequest & {
    index: number;
};
export type TDatabaseEnvironmentRequest = void;
export type TDatabaseEnvironmentResponse = TEnvironment;
export type TDatabaseExistRequest = TDatabaseRequest;
export type TDatabaseExistResponse = boolean;
export type TDatabaseInfoRequest = TDatabaseRequest;
export type TDatabaseInfoResponse = TMetadataDatabaseDetail;
export type TDatabaseStatsRequest = TDatabaseRequest;
export type TDatabaseStatsResponse = unknown;
