import type { ObjectId } from 'mongodb';
import { TDbRecord, TNullable } from './common';
import { TDatabaseRequest } from './database';
import { TPagination, TPaginationReturn } from './pagination';
import { TRollupBaseHistory } from './rollup-offchain';
import { TTransactionRecord, TTransactionRecordNullable } from './transaction';
/**
 * Rollup state
 * @enum
 * @property {string} Updated - Rollup is up to date
 * @property {string} Updating - Rollup is updating
 * @property {string} Outdated - Rollup is outdated
 * @property {string} Failed - Rollup is errored
 */
export declare enum ERollupState {
    Updated = "Updated",
    Updating = "Updating",
    Outdated = "Outdated",
    Failed = "Failed",
    Unavailable = "Unavailable"
}
/**
 * Base type for ModelRollupOnChainHistory
 */
export type TRollupOnChainHistory = TRollupBaseHistory & {
    transactionObjectId: ObjectId;
    rollupOffChainObjectId: ObjectId;
};
export type TRollupOnChainState = Pick<TRollupOnChainHistory, 'databaseName' | 'merkleRootNew' | 'merkleRootOld'> & {
    rollupDifferent: bigint;
    rollupOnChainState: ERollupState;
    latestRollupOnChainSuccess: Date;
};
/**
 * Nullable type from {@link TRollupOnChainState}
 */
export type TRollupStateNullable = TNullable<TRollupOnChainState, 'latestRollupOnChainSuccess' | 'merkleRootNew' | 'merkleRootOld'>;
/**
 * Nullable type from {@link TRollupOnChainHistory}
 */
export type TRollupOnChainHistoryNullable = TNullable<TRollupOnChainHistory, 'merkleRootOld'>;
/**
 * Model type for {@link ModelRollupOnChainHistory}
 */
export type TRollupOnChainHistoryRecord = TDbRecord<TRollupOnChainHistoryNullable>;
export type TRollupOnChainCreateRequest = TDatabaseRequest;
export type TRollupOnChainCreateResponse = boolean;
export type TRollupOnChainHistoryRequest = {
    databaseName: string;
    pagination?: TPagination;
};
export type TRollupOnChainHistoryDataResponse = TNullable<TRollupBaseHistory, 'merkleRootOld'> & Pick<TTransactionRecordNullable, 'status' | 'error' | 'txHash'>;
export type TRollupOnChainHistoryResponse = TPaginationReturn<TRollupOnChainHistoryDataResponse[]>;
export type TRollupOnChainStateRequest = TDatabaseRequest;
export type TRollupOnChainStateResponse = TRollupStateNullable | null;
export type TRollupOnChainHistoryParam = TRollupOnChainHistoryRequest;
export type TRollupOnChainHistoryTransactionAggregate = Omit<TRollupOnChainHistoryRecord, 'transactionObjectId'> & {
    transaction: TTransactionRecord;
};
