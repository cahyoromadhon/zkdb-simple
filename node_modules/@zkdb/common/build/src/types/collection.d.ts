import { OwnershipAndPermission } from '@zkdb/permission';
import type { IndexDirection } from 'mongodb';
import { TSchemaSerializedFieldDefinition } from '../schema';
import { TDbRecord, TPickAlter } from './common';
import { TDatabaseRequest } from './database';
import { TCollectionMetadata } from './metadata';
/**
 * Sorting type
 * @enum
 * @property {string} Asc - Ascending -1
 * @property {string} Desc - Descending 1
 */
export declare enum ESortOrder {
    Asc = "Asc",
    Desc = "Desc"
}
/**
 * Property type
 * The value must compatible with MongoDB
 * This enum is for response type/showing data, not for input
 * @enum
 * @readonly
 * @property {string} Compound - Compound index
 * @property {string} Single - Single index
 */
export declare enum EIndexProperty {
    Compound = "Compound",
    Single = "Single"
}
export type TCollectionIndex = {
    index: Record<string, ESortOrder>;
    unique: boolean;
};
/** Mapping type of index on server side */
export type TCollectionIndexMap<T = any> = {
    [Property in keyof T as `document.${string & Property}.value`]?: IndexDirection;
};
export type TCollection = {
    collectionName: string;
    schema: TSchemaSerializedFieldDefinition[];
};
export type TCollectionIndexInfoMongo = {
    name: string;
    size: number;
    access: number;
    since: Date;
    property: EIndexProperty;
};
export type TCollectionIndexInfo = Pick<TCollectionIndexInfoMongo, 'access' | 'property' | 'size'> & TPickAlter<TCollectionIndexInfoMongo, {
    name: 'indexName';
    since: 'createdAt';
}> & TCollectionIndex;
export type TCollectionTransferLog = TDatabaseRequest & Pick<TCollection, 'collectionName'> & {
    owner: string;
};
export type TCollectionTransferLogRecord = TDbRecord<TCollectionTransferLog>;
export type TCollectionRequest = TDatabaseRequest & Pick<TCollection, 'collectionName'>;
/**
 * Collection create request
 * @typedef TCollectionCreateRequest
 * @param {collectionName} collectionName - Collection name
 * @param {TSchemaDefinition[]} schema - Collection schema
 * @param {number} permission - Collection permission
 * @param {string} group - Collection permission
 */
export type TCollectionCreateRequest = TCollectionRequest & Pick<TCollection, 'schema'> & Partial<TPickAlter<OwnershipAndPermission, {
    group: 'groupName';
    permission: 'permission';
}>>;
export type TCollectionCreateResponse = boolean;
export type TCollectionListRequest = TDatabaseRequest;
export type TCollectionListResponse = TCollectionMetadata[];
export type TCollectionExistRequest = TCollectionRequest;
export type TCollectionExistResponse = boolean;
export type TIndexRequest = TCollectionRequest & Pick<TCollectionIndexInfo, 'indexName'>;
export type TIndexListRequest = TCollectionRequest;
export type TIndexListResponse = TCollectionIndexInfo[];
export type TIndexCreateRequest = TCollectionRequest & {
    index: TCollectionIndex[];
};
export type TIndexCreateResponse = boolean;
export type TIndexDropRequest = TCollectionRequest & {
    indexName: string;
};
export type TIndexDropResponse = boolean;
