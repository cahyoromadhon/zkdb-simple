import type { WithoutId } from 'mongodb';
import { TDbRecord } from './common.js';
import { TPagination, TPaginationReturn } from './pagination.js';
import { TMinaSignature } from './proof.js';
export type TUser = {
    userName: string;
    email: string;
    publicKey: string;
    activated: boolean;
    userData: Record<string, any> | null;
};
export type TUserRecord = TDbRecord<TUser>;
export declare enum EApplicationType {
    ManagementTool = "ManagementTool",
    SDK = "SDK"
}
export type TUserSignInRequest = {
    proof: TMinaSignature;
    applicationType?: EApplicationType;
    recaptchaToken?: string;
};
export type TUserParamSignUp = {
    user: Omit<TUser, 'publicKey'>;
    signature: TMinaSignature;
};
export type TUserSignInResponse = TUser & {
    accessToken: string;
};
export type TUserSignUpInput = Pick<TUser, 'userName' | 'email' | 'userData'> & {
    timestamp: number;
};
export type TUserSignUpRequest = {
    newUser: TUserSignUpInput;
    proof: TMinaSignature;
    applicationType?: EApplicationType;
    recaptchaToken?: string;
};
export type TUserSignUpResponse = WithoutId<TUserRecord>;
export type TUserFindRequest = {
    query: Partial<Pick<TUser, 'email' | 'userName' | 'publicKey'>>;
    pagination: TPagination;
};
export type TUserFindResponse = TPaginationReturn<Omit<TUser, 'userData'>[]>;
export type TUserMeRequest = void;
export type TUserMeResponse = Pick<TUser, 'email' | 'publicKey' | 'userData' | 'userName'>;
export type TUserSignOutRequest = void;
export type TUserSignOutResponse = boolean;
export type TUserEcdsaChallengeRequest = void;
export type TUserEcdsaChallengeResponse = string;
