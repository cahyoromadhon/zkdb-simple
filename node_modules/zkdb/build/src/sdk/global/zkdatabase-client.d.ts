import { Authenticator } from '../authentication';
import { IDatabase } from '../interfaces';
type TZkDatabaseConfig = {
    userName: string;
    environment: 'browser';
    url: string;
} | {
    userName: string;
    privateKey: string;
    environment: 'node';
    url: string;
};
/**
 * The ZkDatabase Client class provides methods to interact with the ZkDatabase.
 * It allows connecting to the database using different authentication methods
 * and provides access to database and system functionalities.
 */
export declare class ZkDatabase {
    private apiClient;
    auth: Authenticator;
    private minaConfig;
    get mina(): import("o1js/dist/node/lib/mina/v1/mina-instance").Mina;
    private constructor();
    private static parseConfig;
    /**
     * Create new instance of ZkDatabase by url
     * Connect from NodeJS using a private key
     *```ts
     * const client = await ZkDatabase.connect('zkdb+https://username:EKEGu8rTZbfWE1HWLxWtDnjt8gchvGxYM4s5q3KvNRRfdHBVe6UU@test-serverless.zkdatabase.org/graphql');
     *```
     * Connect from browser using Auro Wallet
     *```ts
     * const client = await ZkDatabase.connect('zkdb+https://username@test-serverless.zkdatabase.org/graphql');
     *```
     * @param url
     * @returns
     */
    static connect(url: string): Promise<ZkDatabase>;
    /**
     * Create new instance of ZkDatabase by config object
     * Connect from NodeJS using a private key
     *```ts
     * const client = await ZkDatabase.connect({
     *  userName: 'username',
     *  environment: 'node',
     *  privateKey: 'EKEGu8rTZbfWE1HWLxWtDnjt8gchvGxYM4s5q3KvNRRfdHBVe6UU',
     *  url: 'https://test-serverless.zkdatabase.org/graphql',
     * });
     *```
     * Connect from NodeJS using Auro Wallet
     *```ts
     * const client = await ZkDatabase.connect({
     *  userName: 'username',
     *  environment: 'browser',
     *  url: 'https://test-serverless.zkdatabase.org/graphql',
     * });
     *```
     * @param config
     */
    static connect(config: TZkDatabaseConfig): Promise<ZkDatabase>;
    /**
     * Retrieves an instance of `ZkDatabase` with the specified name.
     *
     * @param name - The name of the database to access.
     * @returns An instance of `ZkDatabase`.
     * @throws Will throw an error if the server URL is not set and `connect()` has not been called.
     */
    db(databaseName: string): IDatabase;
}
export default ZkDatabase;
