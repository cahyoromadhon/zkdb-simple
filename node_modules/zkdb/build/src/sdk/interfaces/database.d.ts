import { ETransactionType, TDatabaseCreateRequest, TDatabaseInfoResponse, TGroupListAllResponse, TPagination, TProverRetryResponse, TProverStatusResponse, TRollupOffChainHistoryResponse, TRollupOffChainStateResponse, TRollupOnChainHistoryResponse, TRollupOnChainStateResponse, TSchemaExtendable, TTransactionDraftResponse, TUser, TUserFindResponse, TZkProofStatusResponse } from '@zkdb/common';
import { JsonProof, VerificationKey } from 'o1js';
import { ICollection } from './collection';
import { IGroup } from './group';
import { IUser } from './user';
export type TZkDbProof = {
    step: bigint;
    proof: JsonProof;
    merkleRoot: string;
};
export type TZkDbProofVerify = {
    step: bigint;
    merkleRoot: string;
    valid: boolean;
};
export type TDatabaseConfig = Pick<TDatabaseCreateRequest, 'merkleHeight'>;
export interface IDatabase {
    create(config: TDatabaseConfig): Promise<boolean>;
    exist(): Promise<boolean>;
    info(): Promise<TDatabaseInfoResponse>;
    collection<T extends TSchemaExtendable<any>>(collectionName: string): ICollection<T>;
    collectionList(): Promise<string[]>;
    group(groupName: string): IGroup;
    groupList(): Promise<TGroupListAllResponse>;
    user(userFilter: Partial<Pick<TUser, 'email' | 'publicKey' | 'userName'>>): IUser;
    userList(): Promise<TUserFindResponse>;
    zkProof(step?: bigint): Promise<TZkDbProof | null>;
    zkProofVerify(step?: bigint): Promise<TZkDbProofVerify>;
    zkProofStatus(): Promise<TZkProofStatusResponse>;
    proverStatus(): Promise<TProverStatusResponse>;
    proverRetry(): Promise<TProverRetryResponse>;
    transactionDraft(transactionType: ETransactionType): Promise<TTransactionDraftResponse>;
    transactionSubmit(transactionObjectId: string, txHash: string): Promise<boolean>;
    rollUpOnChainStart(): Promise<boolean>;
    rollUpOnChainHistory(pagination?: TPagination): Promise<TRollupOnChainHistoryResponse>;
    rollUpOffChainHistory(pagination?: TPagination): Promise<TRollupOffChainHistoryResponse>;
    rollUpOnChainState(): Promise<TRollupOnChainStateResponse>;
    rollUpOffChainState(): Promise<TRollupOffChainStateResponse>;
    verificationKey(): Promise<VerificationKey | null>;
}
