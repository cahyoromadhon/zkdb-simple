import { IApiClient } from '@zkdb/api';
import { TCollectionMetadata, TDocumentCreateResponse, TDocumentPrefixed, TPagination, TPaginationReturn, TSchemaExtendable } from '@zkdb/common';
import { Permission } from '@zkdb/permission';
import { ICollection, ICollectionIndex, IDocument, IMetadata } from '../interfaces';
export declare class Collection<T extends TSchemaExtendable<any>> implements ICollection<T> {
    private apiClient;
    private databaseName;
    private collectionName;
    private get basicRequest();
    constructor(apiClient: IApiClient, databaseName: string, collectionName: string);
    get index(): ICollectionIndex;
    get metadata(): IMetadata<TCollectionMetadata>;
    exist(): Promise<boolean>;
    create(schema: T, permission?: Permission, groupName?: string): Promise<boolean>;
    findOne(filter: Partial<TDocumentPrefixed & T['innerStructure']>): Promise<IDocument<T> | null>;
    findMany(filter?: Partial<TDocumentPrefixed & T['innerStructure']> | undefined, pagination?: TPagination): Promise<TPaginationReturn<IDocument<T>[]>>;
    insert(document: T['innerStructure'], permission?: Permission): Promise<TDocumentCreateResponse>;
}
