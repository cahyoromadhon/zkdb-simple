import { IApiClient } from '@zkdb/api';
import { TDocumentDropResponse, TDocumentHistoryFindResponse, TDocumentMetadataResponse, TDocumentResponse, TDocumentUpdateResponse, TMerkleProofDocumentResponse, TMerkleTreeProofByDocIdResponse, TPagination, TSchemaExtendable } from '@zkdb/common';
import { IDocument, IMetadata, TDocument } from '../interfaces';
export declare class Document<T extends TSchemaExtendable<any>> implements IDocument<T> {
    private apiClient;
    private databaseName;
    private collectionName;
    private _document;
    private _innerDocument;
    private get basicRequest();
    constructor(apiClient: IApiClient, databaseName: string, collectionName: string, document: TDocumentResponse);
    get document(): TDocument & T['innerStructure'];
    get metadata(): IMetadata<TDocumentMetadataResponse>;
    drop(): Promise<TDocumentDropResponse>;
    update(document: Partial<T['innerStructure']>): Promise<TDocumentUpdateResponse>;
    merkleProofVerify(schema: T, merkleProof: TMerkleTreeProofByDocIdResponse): boolean;
    toProvable(schema: T): InstanceType<T>;
    merkleProof(): Promise<TMerkleTreeProofByDocIdResponse>;
    merkleProofStatus(): Promise<TMerkleProofDocumentResponse>;
    history(pagination?: TPagination): Promise<TDocumentHistoryFindResponse>;
}
