import { IApiClient } from '@zkdb/api';
import { ETransactionType, TDatabaseInfoResponse, TGroupListAllResponse, TPagination, TProverRetryResponse, TProverStatusResponse, TRollupOffChainHistoryResponse, TRollupOffChainStateResponse, TRollupOnChainHistoryResponse, TRollupOnChainStateResponse, TSchemaExtendable, TTransactionDraftResponse, TUser, TUserFindResponse, TZkProofStatusResponse } from '@zkdb/common';
import { VerificationKey } from 'o1js';
import { ICollection, IDatabase, IGroup, IUser, TDatabaseConfig, TZkDbProof, TZkDbProofVerify } from '../interfaces';
export declare class Database implements IDatabase {
    private databaseName;
    private apiClient;
    constructor(apiClient: IApiClient, databaseName: string);
    private get basicQuery();
    create(config: TDatabaseConfig): Promise<boolean>;
    exist(): Promise<boolean>;
    collection<T extends TSchemaExtendable<any>>(collectionName: string): ICollection<T>;
    collectionList(): Promise<string[]>;
    group(groupName: string): IGroup;
    groupList(): Promise<TGroupListAllResponse>;
    user(userFilter: Partial<Pick<TUser, 'email' | 'publicKey' | 'userName'>>): IUser;
    userList(offset?: number): Promise<TUserFindResponse>;
    zkProof(step?: bigint): Promise<TZkDbProof | null>;
    zkProofVerify(step?: bigint): Promise<TZkDbProofVerify>;
    zkProofStatus(): Promise<TZkProofStatusResponse>;
    transactionDraft(transactionType: ETransactionType): Promise<TTransactionDraftResponse>;
    transactionSubmit(rawTransactionId: string, txHash: string): Promise<boolean>;
    rollUpOnChainStart(): Promise<boolean>;
    rollUpOnChainHistory(pagination?: TPagination): Promise<TRollupOnChainHistoryResponse>;
    rollUpOffChainHistory(pagination?: TPagination): Promise<TRollupOffChainHistoryResponse>;
    rollUpOnChainState(): Promise<TRollupOnChainStateResponse>;
    rollUpOffChainState(): Promise<TRollupOffChainStateResponse>;
    verificationKey(): Promise<VerificationKey | null>;
    info(): Promise<TDatabaseInfoResponse>;
    proverRetry(): Promise<TProverRetryResponse>;
    proverStatus(): Promise<TProverStatusResponse>;
}
