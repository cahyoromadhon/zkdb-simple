/**
 * code 1001 User disconnect, need connect first
 * code 1002 The request was rejected by the user
 * code 20001 No wallet found
 * code 20002 Verify failed
 * code 20003 The parameters were invalid
 * code 20004 Not support chain
 * code 20005 Have Pending chain action
 * code 20006 Method not supported.
 * code 21001 Internal error
 * code 22001 Unspecified error message
 * code 23001 Origin dismatch
 */
export interface ProviderError extends Error {
    message: string;
    code: number;
    data?: unknown;
}
export declare type ConnectListener = (connectInfo: ChainInfoArgs) => void;
export declare type ChainChangedListener = (chainInfo: ChainInfoArgs) => void;
export declare type AccountsChangedListener = (accounts: string[]) => void;
export declare type RequestArguments = {
    method: string;
    params?: unknown[] | object;
};
export interface SendPaymentArgs {
    readonly to: string;
    readonly amount: number;
    readonly fee?: number;
    readonly memo?: string;
    readonly nonce?: number;
}
export interface SendTransactionArgs {
    readonly onlySign?: boolean;
    readonly nonce?: number;
    readonly transaction: string | object;
    readonly feePayer?: {
        readonly fee?: number;
        readonly memo?: string;
    };
}
export declare type SendStakeDelegationArgs = {
    readonly to: string;
    readonly fee?: number;
    readonly memo?: string;
    readonly nonce?: number;
};
export interface SignedData {
    publicKey: string;
    data: string;
    signature: {
        field: string;
        scalar: string;
    };
}
export declare type SignMessageArgs = {
    readonly message: string;
};
export interface VerifyMessageArgs extends SignedData {
}
export declare type SendTransactionHash = {
    hash: string;
    paymentId?: string;
};
export declare type SignedZkappCommand = {
    signedData: string;
};
export declare type SendTransactionResult = SendTransactionHash;
export declare type SendZkTransactionResult = SendTransactionResult | SignedZkappCommand;
export declare type SignedFieldsData = {
    data: (string | number)[];
    publicKey: string;
    signature: string;
};
export declare type SignFieldsArguments = {
    readonly message: (string | number)[];
};
export interface VerifyFieldsArguments {
    publicKey: string;
    data: (string | number)[];
    signature: string;
}
declare type JsonMessageData = {
    label: string;
    value: string;
};
export declare type SignJsonMessageArgs = {
    readonly message: Array<JsonMessageData>;
};
export interface VerifyJsonMessageArgs extends VerifyMessageArgs {
}
export declare type SwitchChainArgs = {
    readonly networkID: string;
};
export declare type CreateNullifierArgs = {
    readonly message: (string | number)[];
};
export declare type Group = {
    x: bigint;
    y: bigint;
};
export declare type Nullifier = {
    publicKey: Group;
    public: {
        nullifier: Group;
        s: bigint;
    };
    private: {
        c: bigint;
        g_r: Group;
        h_m_pk_r: Group;
    };
};
export declare type AddChainArgs = {
    readonly url: string;
    readonly name: string;
};
export declare type ChainInfoArgs = {
    networkID: string;
};
export declare type IWalletInfo = {
    version: string;
    init: boolean;
};
declare type JSONValue = string | number | boolean | null | JSONValue[] | {
    [key: string]: JSONValue;
};
declare type Credential<Data = unknown> = {
    owner: string;
    data: Data;
};
/**
 * Credential in stored form, including the witness and metadata.
 */
declare type StoredCredential<Data = unknown, Witness = unknown> = {
    version: 'v0';
    witness: Witness;
    metadata: JSONValue | undefined;
    credential: Credential<Data>;
};
export declare type StoredCredentialArgs = {
    credential: StoredCredential;
};
export declare type IStoreCredentialData = {
    credential: string;
};
declare type PresentationRequestType = 'no-context' | 'zk-app' | 'https';
declare type PresentationRequest<RequestType extends PresentationRequestType = PresentationRequestType, InputContext = any> = {
    type: RequestType;
    spec: any;
    claims: any;
    inputContext: InputContext;
    program?: unknown;
    verificationKey?: unknown;
};
declare type IPresentationRequest = {
    presentationRequest: PresentationRequest;
    zkAppAccount?: any;
};
export declare type PresentationArgs = {
    presentation: IPresentationRequest;
};
export declare type IRequestPresentation = {
    presentation: string;
};
export {};
